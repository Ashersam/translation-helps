{"version":3,"sources":["Workspace/Scripture/ScriptureView/VerseObject/AlignedWords/AlignedWord/Component.js","Workspace/Scripture/ScriptureView/VerseObject/AlignedWords/AlignedWord/helpers.js","Workspace/Scripture/ScriptureView/VerseObject/AlignedWords/AlignedWord/Container.js","Workspace/Scripture/ScriptureView/VerseObject/AlignedWords/AlignedWord/index.js"],"names":["withStyles","theme","root","width","_ref","classes","verseObject","senses","react_default","a","createElement","index_es","text","content","lemma","strong","morph","map","sense","index","key","gloss","definition","username","repositories","ApplicationHelpers","languageId","parseSenses","lexiconMarkdown","uniqueSenses","split","splice","forEach","senseSection","definitionRegexp","glossRegexp","test","exec","push","unique","array","_callee","_ref2","repository","path","_strong","regenerator_default","wrap","_context","prev","next","uhal","match","Path","join","ugl","sent","Error","concat","abrupt","stop","this","_ref3","_array","response","object","filter","_object","Container","state","_this2","_x","_senses2","apply","arguments","helpers","props","then","unmounted","setState","catch","error","console","log","AlignedWord_Component","React","Component","withTheme"],"mappings":"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","file":"static/js/12.857a6ef8.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport {\n  Typography,\n} from '@material-ui/core';\n\nexport const Component = ({\n  classes,\n  verseObject,\n  senses\n}) => {\n\n  return (\n    <div>\n      <Typography>\n        <span><strong>{verseObject.text || verseObject.content}</strong> -</span>\n        <span> <em>lemma:</em> {verseObject.lemma}</span>\n        <span> <em>strong:</em> {verseObject.strong}</span>\n        <br/>\n        <span> <em>morph:</em> {verseObject.morph}</span>\n      </Typography>\n      {\n        senses.map((sense, index) =>\n          <Typography key={index}>\n            <sup>{index + 1}</sup>\n            {\n              sense.gloss ?\n              <span> <em>Gloss:</em> {sense.gloss}</span>\n              : ''\n            }\n            {\n              sense.definition ?\n              <span> <em>Definition:</em> {sense.definition}</span>\n              : ''\n            }\n          </Typography>\n        )\n      }\n    </div>\n  );\n};\n\nComponent.propTypes = {\n  classes: PropTypes.object.isRequired,\n  verseObject: PropTypes.object.isRequired,\n  senses: PropTypes.array,\n};\n\nconst styles = theme => ({\n  root: {\n    width: '100%',\n  },\n});\n\nexport default withStyles(styles)(Component);\n","import Path from 'path';\nimport * as ApplicationHelpers from '../../../../../../helpers';\n\n/* TODO:\n  remove hardcoded username and languageId\n  pass directly through components\n*/\nconst username = 'unfoldingword';\nconst languageId = 'en'\nconst repositories = ApplicationHelpers.resourceRepositories({languageId});\n\nexport const parseSenses = ({lexiconMarkdown}) => {\n  let uniqueSenses = [];\n  if (lexiconMarkdown) {\n    let senses = [];\n    const sensesSection = lexiconMarkdown.split(/##\\s*Senses/)[1];\n    const senseSections = sensesSection.split(/###\\s*Sense/).splice(1);\n    senseSections.forEach(senseSection => {\n      const definitionRegexp = /####\\s*Definitions?.*?[\\n\\s]+(.*?)\\n/;\n      const glossRegexp = /####\\s*Glosse?s?.*?[\\n\\s]+(.*?)\\n/;\n      let definition = definitionRegexp.test(senseSection) ? definitionRegexp.exec(senseSection)[1] : null;\n      definition = (!/#/.test(definition)) ? definition : null;\n      let gloss = glossRegexp.test(senseSection) ? glossRegexp.exec(senseSection)[1] : null;\n      gloss = (!/#/.test(gloss)) ? gloss : null;\n      const sense = {\n        definition: definition,\n        gloss: gloss,\n      };\n      senses.push(sense);\n    });\n    uniqueSenses = unique({array: senses});\n  }\n  return uniqueSenses;\n};\n\nexport async function senses({strong}) {\n  let senses, repository, path;\n  if (/H\\d+/.test(strong)) {\n    repository = repositories.uhal;\n    const _strong = strong.match(/H\\d+/)[0];\n    path = Path.join('content', _strong + '.md');\n  }\n  if (/G\\d+/.test(strong)) {\n    repository = repositories.ugl;\n    path = Path.join('content', strong, '01.md');\n  }\n  if (repository && path) {\n    const lexiconMarkdown = await ApplicationHelpers.fetchFileFromServer({username, repository, path});\n    senses = parseSenses({lexiconMarkdown});\n  }\n  if (!senses) throw(Error(`Could not find sense info for: ${strong}`));\n  return senses;\n};\n\nexport const unique = ({array, response=[]}) => {\n  let _array = array;\n  array.forEach(object => {\n    _array = _array.filter(_object =>\n      !(object.gloss === _object.gloss && object.definition === _object.definition)\n    );\n    _array.push(object);\n  });\n  return _array;\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\n\nimport Component from './Component';\nimport * as helpers from './helpers';\n\nclass Container extends React.Component {\n  state = {\n    senses: [],\n  };\n\n  componentDidMount() {\n    const {strong} = this.props.verseObject;\n/* TODO:\n  remove hardcoded username and languageId\n  pass directly through components\n*/\n    helpers.senses({strong})\n    .then(senses => {\n      if (!this.unmounted) {\n        this.setState({\n          senses,\n        });\n      }\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n\n  componentWillUnmount() {\n    this.unmounted = true;\n  }\n\n  render() {\n    return (\n      <Component\n        verseObject={this.props.verseObject}\n        senses={this.state.senses}\n      />\n    );\n  };\n};\n\nContainer.propTypes = {\n  classes: PropTypes.object.isRequired,\n  verseObject: PropTypes.object.isRequired,\n};\n\nconst styles = theme => ({\n});\n\nexport default withStyles(styles, { withTheme: true })(Container);\n","import Container from './Container';\nexport default Container;\n"],"sourceRoot":""}